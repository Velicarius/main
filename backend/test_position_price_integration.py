#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import SessionLocal
from app.models import Position, User, PriceEOD
from app.services.price_service import PriceService
from uuid import UUID
from decimal import Decimal
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_real_position_creation_with_auto_price_loading():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω"""
    
    print("=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = UUID("00000000-0000-0000-0000-000000000001")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(User).filter(User.id == test_user_id).first()
        if not existing_user:
            existing_user = User(id=test_user_id, email="test_autoprice@example.com")
            db.add(existing_user)
            db.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {existing_user.email}")
        else:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {existing_user.email}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_symbols = [
            {"symbol": "AAPL", "quantity": Decimal("10"), "buy_price": Decimal("175.50")},
            {"symbol": "TSLA", "quantity": Decimal("5"), "buy_price": Decimal("220.00")},
            {"symbol": "NVDA", "quantity": Decimal("2"), "buy_price": Decimal("425.75")},
        ]
        
        service = PriceService(db)
        
        print("\n--- –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–Ω ---")
        existing_symbols = []
        for symbol_data in test_symbols:
            symbol = symbol_data["symbol"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
            existing_price = service.repository.get_latest_price(symbol)
            
            if existing_price:
                print(f"üìä {symbol}: —Ü–µ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î (–¥–∞—Ç–∞: {existing_price.get('date')})")
                existing_symbols.append(symbol)
            else:
                print(f"‚ùì {symbol}: –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–µ—Ç –≤ –ë–î")
        
        print(f"\n–°–∏–º–≤–æ–ª–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏: {len(existing_symbols)}/{len(test_symbols)}")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print("\n--- –≠—Ç–∞–ø 2: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---")
        deleted_positions = db.query(Position).filter(
            Position.user_id == test_user_id,
            Position.symbol.in_([s["symbol"] for s in test_symbols])
        ).delete(synchronize_session=False)
        
        deleted_prices = db.query(PriceEOD).filter(
            PriceEOD.symbol.in_([s["symbol"] for s in test_symbols])
        ).delete(synchronize_session=False)
        
        db.commit()
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {deleted_positions}")
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–Ω: {deleted_prices}")
        
        print("\n--- –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π —Ü–µ–Ω ---")
        
        loaded_symbols = []
        failed_symbols = []
        
        for symbol_data in test_symbols:
            symbol = symbol_data["symbol"]
            quantity = symbol_data["quantity"]
            buy_price = symbol_data["buy_price"]
            
            print(f"\nüìù –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: {symbol}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            position = Position(
                user_id=test_user_id,
                symbol=symbol,
                quantity=quantity,
                buy_price=buy_price,
                currency="USD"
            )
            
            db.add(position)
            db.commit()
            db.refresh(position)
            
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID={position.id}, —Å–∏–º–≤–æ–ª={symbol}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —Ü–µ–Ω—ã (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç API)
            try:
                load_success = service.load_price_for_symbol(symbol)
                
                if load_success:
                    print(f"üí∞ –¶–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è {symbol}")
                    loaded_symbols.append(symbol)
                else:
                    print(f"‚ö†Ô∏è  –¶–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è {symbol}")
                    failed_symbols.append(symbol)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
                failed_symbols.append(symbol)
        
        print(f"\n--- –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---")
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ü–µ–Ω: {len(loaded_symbols)}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω: {len(failed_symbols)}")
        
        if loaded_symbols:
            print(f"\n–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(loaded_symbols)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            for symbol in loaded_symbols:
                price = service.repository.get_latest_price(symbol)
                if price:
                    print(f"üìä {symbol}: {price.get('close')} USD (–¥–∞—Ç–∞: {price.get('date')})")
                else:
                    print(f"‚ö†Ô∏è  {symbol}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
        
        if failed_symbols:
            print(f"\n–°–∏–º–≤–æ–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏: {', '.join(failed_symbols)}")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("  - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
            print("  - –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
            print("  - –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stooq API")
        
        return len(loaded_symbols) > 0  # –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        db.close()


def test_bulk_position_creation():
    """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
    
    print("\n\n=== –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π ===\n")
    
    db = SessionLocal()
    
    try:
        test_user_id = UUID("00000000-0000-0000-0000-000000000001")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        symbols_to_test = ["MSFT", "GOOGL"]
        
        print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        db.query(Position).filter(
            Position.user_id == test_user_id,
            Position.symbol.in_(symbols_to_test)
        ).delete(synchronize_session=False)
        
        db.commit()
        
        print(f"üìù –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {', '.join(symbols_to_test)}")
        
        positions = []
        for symbol in symbols_to_test:
            position = Position(
                user_id=test_user_id,
                symbol=symbol,
                quantity=Decimal("1"),
                buy_price=Decimal("100"),
                currency="USD"
            )
            positions.append(position)
        
        db.add_all(positions)
        db.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—É—é –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
        service = PriceService(db)
        results = service.load_prices_for_symbols(symbols_to_test)
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏:")
        success_count = 0
        for symbol, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"  {status} {symbol}: {'–∑–∞–≥—Ä—É–∂–µ–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
            if success:
                success_count += 1
        
        print(f"\n–ò—Ç–æ–≥–æ —É—Å–ø–µ—à–Ω–æ: {success_count}/{len(symbols_to_test)}")
        
        return success_count > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        return False
    
    finally:
        db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("=== –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stooq API
    try:
        from app.marketdata.stooq_client import fetch_latest_from_stooq
        test_price = fetch_latest_from_stooq("AAPL")
        if test_price:
            print("Stooq API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("Stooq API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stooq API: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    results = []
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    results.append(test_real_position_creation_with_auto_price_loading())
    
    # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    results.append(test_bulk_position_creation())
    
    # –ò—Ç–æ–≥–∏
    successful_tests = sum(results)
    total_tests = len(results)
    
    print(f"\n=== –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
    
    if successful_tests == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif successful_tests > 0:
        print("‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç.")
    else:
        print("‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")
    
    return successful_tests == total_tests


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
