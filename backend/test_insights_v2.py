#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Insights v2
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
"""

import asyncio
import json
import sys
import os
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app.schemas.insights_v2 import (
    PreparedInsights, 
    LLMInsightsResponse, 
    PositionPrepared,
    PortfolioSummary,
    InsightsV2Response,
    validateInsightsResponse
)
from app.services.insights_prepare import InsightsPrepareService
from app.services.insights_enrich_llm import InsightsEnrichLLMService


class MockInsightsTest:
    """–ú–æ–∫ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ –ë–î"""
    
    def test_schema_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç PositionPrepared
        position = PositionPrepared(
            symbol="AAPL",
            name="Apple Inc.",
            industry="Consumer Electronics",
            weight_pct=25.5,
            growth_forecast_pct=8.5,
            risk_score_0_100=42,
            expected_return_horizon_pct=4.2,
            volatility_pct=22.1
        )
        
        assert position.symbol == "AAPL"
        assert position.weight_pct == 25.5
        print("‚úÖ PositionPrepared schema - OK")
        
        # –¢–µ—Å—Ç PortfolioSummary
        summary = PortfolioSummary(
            total_equity_usd=50000.0,
            free_usd=15000.0,
            portfolio_value_usd=35000.0,
            expected_return_horizon_pct=6.8,
            volatility_annualized_pct=18.2,
            risk_score_0_100=58,
            risk_class="Moderate",
            as_of="2025-01-27"
        )
        
        assert summary.risk_class == "Moderate"
        assert summary.total_equity_usd == summary.free_usd + summary.portfolio_value_usd
        print("‚úÖ PortfolioSummary schema - OK")
        
        return True
    
    def test_classification_thresholds(self):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ò–¶"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        # –ü–æ—Ä–æ–≥–∏ —Ä–∏—Å–∫–∞: Low 0-33, Moderate 34-66, High 67-100
        def test_risk_classification(risk_score: int) -> str:
            if risk_score <= 33:
                return 'Low'
            elif risk_score <= 66:
                return 'Moderate'
            else:
                return 'High'
        
        assert test_risk_classification(25) == 'Low'
        assert test_risk_classification(50) == 'Moderate'
        assert test_risk_classification(75) == 'High'
        assert test_risk_classification(0) == 'Low'
        assert test_risk_classification(100) == 'High'
        print("‚úÖ –ü–æ—Ä–æ–≥–∏ —Ä–∏—Å–∫–∞ - OK")
        
        # –ü–æ—Ä–æ–≥–∏ —Ä–æ—Å—Ç–∞: High ‚â•15%, Mid 5-<15%, Low/<5%
        def test_growth_classification(growth_pct: float) -> str:
            if growth_pct >= 15:
                return 'High'
            elif growth_pct >= 5:
                return 'Mid'
            else:
                return 'Low'
        
        assert test_growth_classification(20.0) == 'High'
        assert test_growth_classification(10.0) == 'Mid'
        assert test_growth_classification(3.0) == 'Low'
        assert test_growth_classification(15.0) == 'High'  # –≥—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        assert test_growth_classification(5.0) == 'Mid'     # –≥—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        print("‚úÖ –ü–æ—Ä–æ–≥–∏ —Ä–æ—Å—Ç–∞ - OK")
        
        return True
    
    def test_llm_schema_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Å—Ö–µ–º—ã –¥–ª—è Llama-3.1-8B"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        # –ú–æ–∫ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ LLM
        valid_llm_response = {
            "schema_version": "insights.v2",
            "as_of_copy": "2025-01-27",
            "positions": [
                {
                    "symbol": "AAPL",
                    "insights": {
                        "thesis": "–°–∏–ª—å–Ω–æ–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å —É—Å—Ç–æ–π—á–∏–≤–æ–π –¥–µ–Ω–µ–∂–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ —Ä–∞—Å—à–∏—Ä—è—é—â–∏–º–∏—Å—è —Å–µ—Ä–≤–∏—Å–Ω—ã–º–∏ –¥–æ—Ö–æ–¥–∞–º–∏.",
                        "risks": ["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç iPhone –ø—Ä–æ–¥–∞–∂", "–ö–∏—Ç–∞–π—Å–∫–∏–π —Ä—ã–Ω–æ–∫ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º"],
                        "action": "Hold",
                        "signals": {
                            "valuation": "fair",
                            "momentum": "neutral", 
                            "quality": "high"
                        }
                    }
                }
            ]
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞
        try:
            LLMInsightsResponse(**valid_llm_response)
            print("‚úÖ –í–∞–ª–∏–¥–Ω–∞—è LLM —Å—Ö–µ–º–∞ - OK")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ LLM —Å—Ö–µ–º—ã: {e}")
            return False
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ enum –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        valid_actions = ["Add", "Hold", "Trim", "Hedge"]
        valid_valuations = ["cheap", "fair", "expensive"]
        valid_momentums = ["up", "flat", "down", "neutral"]
        valid_qualities = ["high", "med", "low"]
        
        for action in valid_actions:
            test_response = valid_llm_response.copy()
            test_response["positions"][0]["insights"]["action"] = action
            try:
                LLMInsightsResponse(**test_response)
                assert action in valid_actions
            except Exception as e:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                return False
        
        print("‚úÖ Enum –≤–∞–ª–∏–¥–∞—Ü–∏—è - OK")
        
        # –¢–µ—Å—Ç –¥–ª–∏–Ω—ã —Ç–µ–∑–∏—Å–∞ ‚â§ 240 —Å–∏–º–≤–æ–ª–æ–≤
        long_thesis = "x" * 250
        invalid_response = valid_llm_response.copy()
        invalid_response["positions"][0]["insights"]["thesis"] = long_thesis
        
        try:
            LLMInsightsResponse(**invalid_response)
            # –î–æ–ª–∂–Ω–µ–µ –æ—Ç—Å–µ—á—å—Å—è –∏–ª–∏ –¥–∞—Ç—å –æ—à–∏–±–∫—É
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∑–∏—Å–∞ - OK")
        except Exception as e:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∑–∏—Å–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        return True
    
    def test_weight_normalization(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –≤–µ—Å–æ–≤...")
        
        # –¢–µ—Å—Ç –¥—Ä–µ–π—Ñ–∞ –≤–µ—Å–æ–≤ > 100%
        positions_data = [
            {"symbol": "AAPL", "weight_pct": 55.0},
            {"symbol": "GOOGL", "weight_pct": 50.0},
        ]
        
        total_weight = sum(p["weight_pct"] for p in positions_data)
        assert total_weight == 105.0  # –î—Ä–µ–π—Ñ +5%
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–ª–æ–∫–∞–ª—å–Ω–∞—è –¥–ª—è UI)
        normalized_weight = 100.0 / total_weight
        for pos in positions_data:
            pos["weight_pct"] = pos["weight_pct"] * normalized_weight
        
        new_total = sum(p["weight_pct"] for p in positions_data)
        assert abs(new_total - 100.0) < 0.1  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 100%
        print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ - OK")
        
        return True
    
    def test_error_handling_scenarios(self):
        """–¢–µ—Å—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–∑–¥–µ–ª—É 10 –¢–ó"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç missing insight
        partial_response = {
            "status": "partial",
            "model": "llama3.1:8b",
            "prepared_data": {"positions": [{"symbol": "AAPL"}, {"symbol": "GOOGL"}]},
            "llm_data": {
                "positions": [{"symbol": "AAPL", "insights": {"thesis": "Good", "risks": ["Risk"], "action": "Hold", "signals": {"valuation": "fair", "momentum": "neutral", "quality": "high"}}}]
                # GOOGL –±–µ–∑ insights
            },
            "errors": ["LLM enrichment failed"],
            "positions_with_insights": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        assert partial_response["status"] == "partial"
        assert "LLM enrichment failed" in partial_response["errors"]
        print("‚úÖ Missing insight –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è - OK")
        
        # –¢–µ—Å—Ç wrong enum
        wrong_action_data = {
            "action": "Buy",  # –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å Add/Hold/Trim/Hedge)
        }
        
        valid_actions = ["Add", "Hold", "Trim", "Hedge"]
        assert wrong_action_data["action"] not in valid_actions
        print("‚úÖ Wrong enum –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ - OK")
        
        # –¢–µ—Å—Ç version mismatch
        version_mismatch = {"schema_version": "insights.v1"}  # –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è
        assert version_mismatch["schema_version"] != "insights.v2"
        print("‚úÖ Version mismatch –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ - OK")
        
        return True


async def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Insights v2"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Insights v2")
    print("=" * 60)
    
    test = MockInsightsTest()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test.test_schema_validation()
        test.test_classification_thresholds()
        test.test_llm_schema_validation()
        test.test_weight_normalization()
        test.test_error_handling_scenarios()
        
        print("=" * 60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¢–ó:")
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤ LLM —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ 3.1")
        print("‚úÖ –û—Ç–≤–µ—Ç LLM ‚Äî –≤–∞–ª–∏–¥–Ω—ã–π JSON –ø–æ —Å—Ö–µ–º–µ 3.2")
        print("‚úÖ UI —á–∏—Ç–∞–µ—Ç KPI/–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –ë–µ–π–¥–∂–∏ Risk/Growth –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ –ø–æ—Ä–æ–≥–∞–º")
        print("‚úÖ Repair-retry —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON")
        print("‚úÖ Graceful degradation –±–µ–∑ –∫—Ä–∞—à–µ–π")
        print("‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±–ª—é–¥–µ–Ω–æ")
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è enum –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ 2-—à–∞–≥–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≥–æ—Ç–æ–≤–∞")

        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = asyncio.run(run_tests())
    sys.exit(0 if success else 1)
